{
    "collab_server" : "",
    "contents" : "### Step 4 after MeltCastWFDData.R\n\n# Adds Environmenal variables from GIS data\nlibrary(lubridate)\nlibrary(rgdal)\nlibrary(sp)\nlibrary(raster)\n\nwork <- getwd()\n\n# Old version used long data by year and month\n#WFD <- read.csv(\"Data/WFDPresAbs100Month.csv\")\n# Reconstruct date column from component parts\n# Assumes 1st of month because of summary of records\n#Method for using month and year to assign Julian date\n#WFD$date <- paste(1, WFD$Month, WFD$Year, sep = \"/\")\n#Method for using just Year to assign Julian date\n#WFD$date <- paste(1, 6, WFD$Year, sep = \"/\")\n\n### No need for Julian Date if just using Year\n# Convert to Julian Date\n#WFD$Julian <- yday(WFD$date)\nsetwd(work)\n## New version uses occupancy matrix based on year with locations\nWFD <- read.csv(\"Data/WFDOccuMatLoc.csv\")\nWFD.state <- read.csv(\"Data/WFDStateOccuMatLoc.csv\")\n\n# Need to edit csv file to make sure that ad, ex and larvae presences are correct. Some rows are missing any records...\n\n# Data frame EnvVars now created\n### Add GIS data\nsetwd(\"Data/GIS Data/EnvVars\")\nenv.ls <- list.files(pattern='\\\\.img$')\n# Rasters have different extents - can extract data but need to solve this before they can be used in projection (PET, WIlderness etc. different from habitat data)\n#env.stack <- stack(env.ls[-1])\n\n# Points are in let long - need converting to BNG easting/northing???\n\n# EPSG codes for each projections\nukgrid = \"+init=epsg:27700\"\nlatlong = \"+init=epsg:4326\"\n\n# Create spatial object from lat and long points\npoint_locs_SP <- SpatialPointsDataFrame(data.frame(WFD$Long.100, WFD$Lat.100), data = data.frame(WFD$Clust), proj4string =\n    CRS(latlong))\n\npoint_locs_SP.state <- SpatialPointsDataFrame(data.frame(WFD.state$Long.100, WFD.state$Lat.100), data = data.frame(WFD.state$Clust), proj4string =\n                                          CRS(latlong))\n\n\n# Transform lat and long points from Lat long to BNG\npoint_locs_SP_BNG <-  spTransform(point_locs_SP,  CRS(ukgrid))\nWFD$x <- point_locs_SP_BNG@coords[,1]\nWFD$y <- point_locs_SP_BNG@coords[,2]\n\n# Transform lat and long points from Lat long to BNG\npoint_locs_SP_BNG.state <-  spTransform(point_locs_SP.state,  CRS(ukgrid))\nWFD.state$x <- point_locs_SP_BNG.state@coords[,1]\nWFD.state$y <- point_locs_SP_BNG.state@coords[,2]\n\n\n### Need to construct data frames for site variables and observation variables\n### May need to resample CHESS data\n## To create data frame\nsetwd(paste(work, '/Data/GIS Data/EnvVars/', sep = \"\"))\nenv.vars <- cbind(Area.stw  = extract(raster(env.ls[1]), sp::coordinates(data.frame(WFD$x, WFD$y))), AWI = extract(raster(env.ls[2]), sp::coordinates(data.frame(WFD$x, WFD$y))), extract(stack(env.ls[c(3:12, 15:17)]), sp::coordinates(data.frame(WFD$x, WFD$y))), dist.stw = extract(raster(env.ls[18]), sp::coordinates(data.frame(WFD$x, WFD$y))), extract(stack(env.ls[c(13:14, 19:20)]), sp::coordinates(data.frame(WFD$x, WFD$y))), wildness = extract(raster(env.ls[21]), sp::coordinates(data.frame(WFD$x, WFD$y))), elevation = extract(raster('DEM.asc'), sp::coordinates(data.frame(WFD$x, WFD$y))))\nenv.vars.state <- cbind(Area.stw  = extract(raster(env.ls[1]), sp::coordinates(data.frame(WFD.state$x, WFD.state$y))), AWI = extract(raster(env.ls[2]), sp::coordinates(data.frame(WFD.state$x, WFD.state$y))), extract(stack(env.ls[c(3:12, 15:17)]), sp::coordinates(data.frame(WFD.state$x, WFD.state$y))), dist.stw = extract(raster(env.ls[18]), sp::coordinates(data.frame(WFD.state$x, WFD.state$y))), extract(stack(env.ls[c(13:14, 19:20)]), sp::coordinates(data.frame(WFD.state$x, WFD.state$y))), wildness = extract(raster(env.ls[21]), sp::coordinates(data.frame(WFD.state$x, WFD.state$y))), elevation = extract(raster('DEM.asc'), sp::coordinates(data.frame(WFD.state$x, WFD.state$y))))\nsetwd(work)\n#write.csv(env.vars, \"Data/EnvVars.csv\")\n#write.csv(env.vars.state, \"Data/MultiState_EnvVars.csv\")\n\n\n# To Load data frame\n#EnvVars <- read.csv(\"Data/EnvVars.csv\")\n\n\n#Only works with old version using long data\n# Create data frame of climate variables\n#clim.vars <- data.frame(tmax = WFD$tmax, tmin = WFD$tmin, af = WFD$af, rain = WFD$rain, sun = WFD$sun)\n\n#Automatic version - see below for method which specifies variables\n#create data frame for csvToUMF\n# Cuurently using versionwithout exuvia presence for 'unmarked'\n#WFD.UMF <- data.frame(Site = WFD$Clust, Year = WFD$Year, Pres = WFD$WFD.pres, Ex.pres = WFD$Ex.pres, tmax = WFD$tmax, tmin = WFD$tmin, af = WFD$af, rain = WFD$rain, sun = WFD$sun,x= WFD$x, y = WFD$y)\n#WFD.UMF <- data.frame(Site = WFD$Clust, JulianDate = WFD$Julian, Pres = WFD$WFD.pres)\n#WFD.UMF <- cbind(WFD, env.vars)\n\nwrite.csv(WFD, \"Data/WFDHighland_wide_UMF.csv\", row.names = FALSE)\nwrite.csv(WFD.state, \"Data/WFDHighland_wide_state_UMF.csv\", row.names = FALSE)\n### Old versions to deal with Long data\n#write.csv(WFD.UMF, \"Data/WFDHighland_Presence_LongUMF.csv\", row.names = FALSE)\n\n#WFD.UMF.2012 <- subset(WFD.UMF, subset = WFD$Year >= 2012)\n#write.csv(WFD.UMF.2012, \"Data/WFDHighland_Presence_LongUMF2012.csv\", row.names = FALSE)\n\n#WFD.UMF.2010 <- subset(WFD.UMF, subset = WFD$Year > 2009 & WFD$Year < 2016)\n#write.csv(WFD.UMF.2010[,1:3], \"Data/WFDHighland_Presence_LongUMF2010.csv\", row.names = FALSE)\n",
    "created" : 1520337715243.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4103763126",
    "id" : "FB2ECBD5",
    "lastKnownWriteTime" : 1514895178,
    "last_content_update" : 1514895178,
    "path" : "~/Dropbox/Research/Dragonfly/White-faced Darter/WFDHighlands/R/WFDDateEnv.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}